from django.core.management.base import BaseCommand
from django.conf import settings
from bot.management.commands.config import application
from telegram.ext import (
    CommandHandler, 
    ContextTypes,
    MessageHandler, 
    filters, 
    ConversationHandler
)
from telegram import (
    Update, 
    KeyboardButton, 
    ReplyKeyboardMarkup
)
import asyncio

from bot.management.commands.config import USER_TYPING, CHOOSING_OPTION_CLIENT, CHOOSING_OPTION_WORKER, CHECK_CORRECT, PHONE_NUMBER, CHOOSING_OPTION_PHONE

from bot.management.commands.sync_request import get_data_id_async
from bot.models import User, Worker
from .start_keyboard import start_keyboard, start_job_keyboard

"""client modules"""
from bot.management.commands.modules.client.afisha import afisha
from bot.management.commands.modules.client.contacts import contact
from bot.management.commands.modules.client.phone_number import phone_number
from bot.management.commands.modules.client.profile import profile
from bot.management.commands.modules.client.virtual_card import virtual_card

"""job modules"""
from bot.management.commands.modules.personal.scan_code import scan_code
from bot.management.commands.modules.personal.create_check import phone_number_billing, check, check_the_check
from bot.management.commands.modules.personal.instruction import instruction
from bot.management.commands.modules.personal.cancel_operation import cancel_operation


import logging
# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
# set higher logging level for httpx to avoid all GET and POST requests being logged
logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """client start"""
    context.bot_data['state'] = 'start'
    user = update.effective_user
    user_id = user.id
    try: 
        user_profile = await get_data_id_async(User, user_id)
        context.bot.send_message(chat_id=update.effective_chat.id, text='üü¢ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
        await start_keyboard(update, context) 
    except User.DoesNotExist:
        await context.bot.send_message(chat_id=update.effective_chat.id, text='–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä üì≤"', reply_markup=ReplyKeyboardMarkup([[KeyboardButton('üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä', request_contact=True)]], resize_keyboard=True, one_time_keyboard=True))
    return CHOOSING_OPTION_CLIENT

async def start_job(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """job start"""
    context.bot_data['state'] = 'start_job'
    user = update.effective_user
    user_id = user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        job_profile = await get_data_id_async(Worker, user_id)
        await context.bot.send_message(chat_id=update.effective_chat.id, text='–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
        await start_job_keyboard(update, context)
    except Worker.DoesNotExist:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await context.bot.send_message(chat_id=update.effective_chat.id, text='–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä üì≤"', reply_markup=ReplyKeyboardMarkup([[KeyboardButton('üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä', request_contact=True)]], resize_keyboard=True, one_time_keyboard=True))
    return CHOOSING_OPTION_WORKER


def main():
    conv_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start), CommandHandler('start_job', start_job)],
    states={
        CHOOSING_OPTION_CLIENT: [
            MessageHandler(filters.Text('üë®‚Äçüíº –ü—Ä–æ—Ñ–∏–ª—å'), profile),
            MessageHandler(filters.Text('üìÜ –ê—Ñ–∏—à–∞'), afisha),
            MessageHandler(filters.Text('üìó –ö–æ–Ω—Ç–∞–∫—Ç—ã'), contact),
            MessageHandler(filters.Text('ü™™ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞'), virtual_card),
            MessageHandler(filters.CONTACT, phone_number)
            ],
        CHOOSING_OPTION_WORKER: [
            MessageHandler(filters.Text('üî≥ –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥'), scan_code),
            MessageHandler(filters.Text('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'), instruction),
            MessageHandler(filters.Text('üëÜ –í–≤–µ—Å—Ç–∏ ID –∫–ª–∏–µ–Ω—Ç–∞'), phone_number_billing),
            MessageHandler(filters.Text('‚Ü©Ô∏è –ù–∞–∑–∞–¥'), cancel_operation),
            MessageHandler(filters.CONTACT, phone_number),
        ],
        PHONE_NUMBER: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, check,)
        ],
        CHECK_CORRECT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, check_the_check,)
        ]
    },
    fallbacks=[]
)
    application.add_handler(conv_handler)
    application.run_polling(allowed_updates=Update.ALL_TYPES, poll_interval=0.5)
class Command(BaseCommand):
    help = "Telegram - bot"
    def handle(self, *args, **kwargs):
        asyncio.run(main())
        

