from telegram import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from ...models import UserProfile, JobProfile
from io import BytesIO
from .start_keyboard import start_keyboard, start_job_keyboard
import re
from datetime import datetime
import decimal
#import cv2

from django.core.management.base import BaseCommand
from django.conf import settings
from django.core.exceptions import ObjectDoesNotExist
from bot.management.commands.config import application
from telegram.ext import CallbackQueryHandler, CallbackContext, CommandHandler, ContextTypes, MessageHandler, filters
from telegram import Update
import asyncio
import os
from asgiref.sync import sync_to_async


# import client model
from bot.management.commands.modules.client.afisha import afisha
from bot.management.commands.modules.client.contacts import contact
from bot.management.commands.modules.client.create_signed_qr import create_signed_qr_code
from bot.management.commands.modules.client.phone_number import phone_number
from bot.management.commands.modules.client.profile import profile
from bot.management.commands.modules.client.virtual_card import virtual_card

# import job model
from bot.management.commands.modules.personal.scan_code import scan_code

import logging
# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
# set higher logging level for httpx to avoid all GET and POST requests being logged
logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.bot_data['state'] = 'start'
    user = update.effective_user
    user_id = user.id

    try: 
        user_profile = await sync_to_async(UserProfile.objects.get)(external_id=user_id)
        await context.bot.send_message(chat_id=update.effective_chat.id, text='üü¢ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
    except UserProfile.DoesNotExist:
        await context.bot.send_message(chat_id=update.effective_chat.id, text='–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä üì≤"', reply_markup=ReplyKeyboardMarkup([[KeyboardButton('üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä', request_contact=True)]], resize_keyboard=True, one_time_keyboard=True))
    finally:
        await start_keyboard(update, context)

"""
–ö–û–î –î–õ–Ø –†–ê–ë–û–¢–ù–ò–ö–ê
"""

async def start_job(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.bot_data['state'] = 'start_job'
    user = update.effective_user
    user_id = user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        job_profile = await sync_to_async(JobProfile.objects.get)(external_id=user_id)
        await context.bot.send_message(chat_id=update.effective_chat.id, text='–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
    except JobProfile.DoesNotExist:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await context.bot.send_message(chat_id=update.effective_chat.id, text='–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä üì≤"', reply_markup=ReplyKeyboardMarkup([[KeyboardButton('üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä', request_contact=True)]], resize_keyboard=True, one_time_keyboard=True))
    finally:
        start_job_keyboard(update, context)


async def add_menu_total_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å —Å—É–º–º—É —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞')],
        [KeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥')]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await context.bot.send_message(chat_id=update.effective_chat.id, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ üÜî –∫–ª–∏–µ–Ω—Ç–∞.', reply_markup=reply_markup)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è ID –∫–ª–∏–µ–Ω—Ç–∞
    context.user_data['waiting_for_id'] = True

async def cancel_operation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    start_job_keyboard(update, context)
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    context.user_data['waiting_for_id'] = False
    context.user_data['waiting_for_menu_total'] = False

async def handle_menu_total(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == '‚ùå –£–¥–∞–ª–∏—Ç—å —Å—É–º–º—É —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞':
        user_profile = context.user_data.get('user_profile')
        if user_profile:
            # –í–æ–∑–≤—Ä–∞—Ç —Å—É–º–º—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ–Ω—é –≤ —Ç–µ–∫—É—â—É—é —Å—É–º–º—É –º–µ–Ω—é
            user_profile.total_spent = user_profile.total_spent - decimal.Decimal(user_profile.menu_total)
            user_profile.menu_total = 0
            user_profile.save()
            await update.message.reply_text(f'‚úÖ –°—É–º–º–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞. –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {user_profile.menu_total} —Ä—É–±.')
        else:
            await update.message.reply_text('üî¥ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')
            start_job_keyboard(update, context)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ–∂–∏–¥–∞–Ω–∏—è
        context.user_data['waiting_for_menu_total'] = False
        context.user_data.pop('user_profile', None)
    if context.user_data.get('waiting_for_id'):
        user_id = update.message.text
        if not user_id.isdigit():
            await update.message.reply_text('ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:')
        try:
            user_profile = UserProfile.objects.get(external_id=user_id)
            vip_status = "VIP-–∫–ª–∏–µ–Ω—Ç ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è" if user_profile.is_special else "–û–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç ‚≠êÔ∏è"
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            reply_message = f"–°—Ç–∞—Ç—É—Å: {vip_status}\n"
            reply_message += f"üÜî ID –∫–ª–∏–µ–Ω—Ç–∞: {user_profile.external_id}\n"
            reply_message += f"üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_profile.phone_number}\n"
            reply_message += f"üìâ –¢–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞: {user_profile.discount_percentage}%\n"
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            await context.bot.send_message(chat_id=update.effective_chat.id, text=reply_message)

        except ObjectDoesNotExist:
            await update.message.reply_text('–ö–ª–∏–µ–Ω—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.')

        context.user_data['waiting_for_id'] = False
        context.user_data['user_profile'] = user_profile
        await context.bot.send_message(chat_id=update.effective_chat.id, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ üëÜ —Å—É–º–º—É —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞\n '
                                                                        '–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—É—é —Ä–∞–Ω–µ–µ —Å—É–º–º—É –∑–∞–∫–∞–∑–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É\n'
                                                                        '"‚ùå –£–¥–∞–ª–∏—Ç—å —Å—É–º–º—É —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞"')
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã –º–µ–Ω—é
        context.user_data['waiting_for_menu_total'] = True

    elif context.user_data.get('waiting_for_menu_total'):
        menu_total = update.message.text

        if not re.match(r'^\d+\.\d{2}$', menu_total.replace(',', '.')):
            await update.message.reply_text('–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä—É–±–ª–∏ –∏ –∫–æ–ø–µ–π–∫–∏ (0.00)')

        user_profile = context.user_data.get('user_profile')
        if user_profile:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—É–º–º—É –º–µ–Ω—é
            user_profile.previous_menu_total = user_profile.menu_total

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É —Ç–µ–∫—É—â–µ–≥–æ –º–µ–Ω—é –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_profile.menu_total = '{:.2f}'.format(float(menu_total))
            user_profile.total_spent += decimal.Decimal(user_profile.menu_total)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é
            user_profile.menu_total_timestamp = datetime.now()
            user_profile.save()
            await update.message.reply_text(f'–°—É–º–º–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ {user_profile.menu_total} —Ä—É–±. —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.')
            vip_status = "VIP-–∫–ª–∏–µ–Ω—Ç ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è" if user_profile.is_special else "–û–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç ‚≠êÔ∏è"
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            reply_message = f"–°—Ç–∞—Ç—É—Å: {vip_status}\n"
            reply_message += f"üÜî ID –∫–ª–∏–µ–Ω—Ç–∞: {user_profile.external_id}\n"
            reply_message += f"üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_profile.phone_number}\n"
            reply_message += f"üìâ –¢–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞: {user_profile.discount_percentage}%\n"
            reply_message += f"üíµ –°—É–º–º–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞: {user_profile.menu_total} —Ä—É–±.\n"
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            await context.bot.send_message(chat_id=update.effective_chat.id, text=reply_message)
            start_job_keyboard(update, context)
        else:
            await update.message.reply_text('üî¥ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ–∂–∏–¥–∞–Ω–∏—è
        context.user_data['waiting_for_menu_total'] = False
        context.user_data.pop('user_profile', None)
    else:
        start_job_keyboard(update, context)

async def instruction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –≤ –ø–∞–ø–∫–µ media
    file_path = os.path.join('media', 'instructions', 'instruction.pdf')

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
    with open(file_path, 'rb') as file:
        await context.bot.send_document(chat_id=update.effective_chat.id,document=file,caption='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞')




def main():
    

    # client handler
    start_handler = CommandHandler("start", start)
    phone_number_handler = MessageHandler(filters.CONTACT, phone_number)
    profile_handler = MessageHandler(filters.Text('üë®‚Äçüíº –ü—Ä–æ—Ñ–∏–ª—å'), profile)
    afisha_handler = MessageHandler(filters.Text('üìÜ –ê—Ñ–∏—à–∞'), afisha)
    contact_handler = MessageHandler(filters.Text('üìó –ö–æ–Ω—Ç–∞–∫—Ç—ã'), contact)
    virtual_card_handler = MessageHandler(filters.Text('ü™™ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞'), virtual_card)

    # job handler 
    start_job_hander = CommandHandler('start_job', start_job)
    scan_code_handler = MessageHandler(filters.Text('üî≥ –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥'), scan_code)
    instruction_handler = MessageHandler(filters.Text('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'), instruction)
    add_menu_total_button_handler = MessageHandler(filters.Text('üëÜ –í–≤–µ—Å—Ç–∏ ID –∫–ª–∏–µ–Ω—Ç–∞'), add_menu_total_button)
    cancel_operation_handler = MessageHandler(filters.Text('‚Ü©Ô∏è –ù–∞–∑–∞–¥'), cancel_operation)
    handle_menu_total_handler = MessageHandler(filters.Text, handle_menu_total)


    application.add_handler(start_handler)
    application.add_handler(phone_number_handler)
    application.add_handler(profile_handler)
    application.add_handler(afisha_handler)
    application.add_handler(contact_handler)
    application.add_handler(virtual_card_handler)
    application.add_handler(start_job_hander)
    application.add_handler(scan_code_handler)
    application.add_handler(instruction_handler)
    application.add_handler(add_menu_total_button_handler)
    application.add_handler(cancel_operation_handler)
    application.add_handler(handle_menu_total_handler)



    
    # run bot
    application.run_polling(allowed_updates=Update.ALL_TYPES)


class Command(BaseCommand):

    help = "Telegram - bot"

    def handle(self, *args, **kwargs):
        asyncio.run(main())
        

