from telegram.ext import ContextTypes
from telegram import Update
from cryptography.hazmat.primitives.asymmetric import rsa
from bot.management.commands.modules.client.create_signed_qr import create_signed_qr_code
import qrcode
from bot.models import User
from bot.management.commands.start_keyboard import start_keyboard
from bot.management.commands.sync_request import get_data_id_async, save_data_async


async def virtual_card(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    user_id = user.id
    user_profile = await get_data_id_async(User, user_id)
    await context.bot.send_message(chat_id=update.effective_chat.id, text='ü™™ –í–∞—à–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞:')

    # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
    qr_data = f'ID : {user_profile.external_id}\n –°–∫–∏–¥–∫–∞: {user_profile.discount_percentage}%\n'

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä—ã RSA
    private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
    qr_code = await create_signed_qr_code(user_profile, qr_data, private_key)
    user_profile.qr_code = qr_code  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º QR-–∫–æ–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_data_async(user_profile)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f'üÜî –í–∞—à ID: {user_profile.external_id}\nüî≥ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π QR-–∫–æ–¥:')
    await context.bot.send_photo(chat_id=update.effective_chat.id, photo=open(qr_code, 'rb'))
    await start_keyboard(update, context)