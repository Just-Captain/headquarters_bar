from telegram.ext import ContextTypes
from telegram import Update, ReplyKeyboardRemove
from asgiref.sync import sync_to_async
from cryptography.hazmat.primitives.asymmetric import rsa

from bot.models import UserProfile, JobProfile
from bot.management.commands.start_keyboard import start_keyboard, start_job_keyboard
from bot.management.commands.func.client.create_signed_qr import create_signed_qr_code


async def phone_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    state = context.bot_data.get('state')
    if state == 'start':
        user = update.effective_user
        user_id = user.id
        phone_number = update.effective_message.contact.phone_number
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            user_profile = await sync_to_async(UserProfile.objects.get)(external_id=user_id)
            await context.bot.send_message(chat_id=update.effective_chat.id, text='üü¢ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
        except UserProfile.DoesNotExist:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_profile = await sync_to_async(UserProfile.objects.create)(external_id=user_id, phone_number=phone_number)
            # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
            qr_data = f'üÜî ID : {user_profile.external_id}' \
                      f'üìâ –°–∫–∏–¥–∫–∞: {user_profile.discount_percentage}%'
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä—ã RSA
            private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
            qr_code = create_signed_qr_code(user_profile, qr_data, private_key)
            user_profile.qr_code = qr_code  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º QR-–∫–æ–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_profile.save()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥
            await context.bot.send_message(chat_id=update.effective_chat.id, text='‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f'üÜî –í–∞—à ID: {user_profile.external_id}\nüî≥ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π QR-–∫–æ–¥: ',
                                     reply_markup=ReplyKeyboardRemove(remove_keyboard=True))
            await context.bot.send_photo(chat_id=update.effective_chat.id, photo=open(qr_code, 'rb'))
            await context.bot.send_message(chat_id=update.effective_chat.id, text='üìÅ –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤–æ –≤–∫–ª–∞–¥–∫–µ "ü™™ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞"')
            start_keyboard(update, context)
            
    elif state == 'start_job':
        user = update.effective_user
        user_id = user.id
        phone_number = update.effective_message.contact.phone_number

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            job_profile = JobProfile.objects.get(external_id=user_id)
            context.bot.send_message(chat_id=update.effective_chat.id, text='üü¢ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
        except JobProfile.DoesNotExist:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            job_profile = JobProfile.objects.create(external_id=user_id, phone_number=phone_number)
            job_profile.save()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–Ω–∏–∫–µ
            context.bot.send_message(chat_id=update.effective_chat.id, text='‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
            context.bot.send_message(chat_id=update.effective_chat.id, text=f'–í–∞—à ID: {job_profile.external_id}', reply_markup=ReplyKeyboardRemove(remove_keyboard=True))
            start_job_keyboard(update, context)
    else:
        pass